import React, {useEffect, useState} from 'react';
import {View, TouchableOpacity} from 'react-native';
import moment from 'moment-timezone';
import {useSelector} from 'react-redux';
import {day as styles} from './styles';
import {URL} from 'react-native-url-polyfill';
import {toggleMultipleSounds} from '../../repository/track_player_controller';
import {withTheme} from '../../global/theming/ThemeProvider';
// import {
//   addScheduledNotification,
//   cancelNotification,
// } from '../../repository/notificationService';
// import NotificationIcon from '../../global/icons/NotificationIcon';
// import {getScheduledNotifications} from '../../repository/storage';
import {useNavigation} from '@react-navigation/native';
//components
import PlayButton from '../../global/icons/PlayPauseIcon';
import AddIcon from '../../global/icons/AddIcon';
import DefaultText from '../../global/components/DefaultText';

type Props = {
  program: IProgram;
  trackIsPlaying: boolean;
  theme: ITheme;
};

const Day: React.FC<Props> = ({program, theme, trackIsPlaying}) => {
  const needsReload = useSelector(
    (state: {forceReload: boolean}) => state.forceReload,
  );
  const isChromecast = useSelector(
    (state: {isChromecast: boolean}) => state.isChromecast,
  );
  const navigation = useNavigation();
  const [reminderActive, setReminderActive] = useState<boolean>(false);
  const [reminders, setReminders] = useState<Array<IReminder>>();

  //unique id needed for adding and cancelling local scheduled notification
  //from documentation: Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
  //the max 32-bit integer I believe is (2^31) which is 2147483647
  const reminderId = `${program.Id}${program.StartHour._seconds}`
    .substr(0, 4)
    .concat(`${program.Id}${program.StartHour._seconds}`.substr(-4));

  // const handleAddReminder = (): void => {
  //   if (!reminderActive) {
  //     addScheduledNotification({
  //       ...program,
  //       reminderId: reminderId,
  //       isChromecast: isChromecast,
  //     });
  //   } else {
  //     cancelNotification(reminderId);
  //   }
  // };

  // useEffect(() => {
  //   // console.log(`${program.Id}${program.StartHour._seconds}`);
  //   getScheduledNotifications(setReminders);
  // }, [needsReload]);

  // useEffect(() => {
  //   if (reminders) {
  //     setReminderActive(
  //       reminderId ===
  //         reminders.find((item) => item.reminderId === reminderId)?.reminderId,
  //     );
  //   }
  // }, [reminders]);

  const sounds = program.Sounds
    ? program.Sounds.filter(x => x.MediaStreams).map(
        (link: string, index: number): Array<IScheduleTrack> => {
          let url: {hostname: string; pathname: string} = new URL(link.MediaStreams);
          return {
            id: `${program.Id}${program.StartHour._seconds}`,
            url: `https://${url.hostname}${url.pathname}`,
            title: program.Title,
            artist: program.Title,
            from: program.StartHour._seconds * 1000,
            to: program.StopHour._seconds * 1000,
            header: 'RamÃ³wka',
            isStream: false,
            artwork: '',
            audioType: 'antena_schedule',
          };
        },
      )
    : [];

  const handleNavigation = () => {
    navigation.navigate('ListModals', {view: 'addTrack', track: sounds[0]});
  };

  return (
    <View
      style={{...styles.container, backgroundColor: theme.Background.primary}}>
      <View style={{...styles.time, backgroundColor: 'transparent'}}>
        <DefaultText
          styles={{
            color: theme.Color.primary,
            fontSize: theme.Size.main,
          }}>
          {moment(program.StartHour._seconds * 1000)
            .tz('Europe/Warsaw')
            .format('HH:mm')}
        </DefaultText>
      </View>
      <View style={styles.player}>
        {sounds.length > 0 && (
          <TouchableOpacity onPress={(e) => toggleMultipleSounds(sounds)}>
            <View>
              <PlayButton isPlaying={trackIsPlaying} size={24} />
            </View>
          </TouchableOpacity>
        )}
      </View>
      <View style={styles.title}>
        <TouchableOpacity
          onPress={() =>
            navigation.navigate('Archiwum', {
              program: program,
            })
          }>
          <DefaultText
            styles={{fontSize: theme.Size.main, color: theme.Color.primary}}>
            {program.Title}
          </DefaultText>
        </TouchableOpacity>
      </View>
      <View style={{...styles.iconContainer}}>
        {/* {program.StartHour._seconds * 1000 > new Date().getTime() && (
          <TouchableOpacity onPress={handleAddReminder}>
            <NotificationIcon
              enabled={reminderActive}
              style={{...styles.notification}}
            />
          </TouchableOpacity>
        )} */}
        {/* {sounds.length > 0 && (
          <TouchableOpacity
            accessible={true}
            accessibilityRole="link"
            accessibilityHint="Dodaj do listy odtwarzania"
            activeOpacity={0.7}
            onPress={handleNavigation}>
            <AddIcon size={24} color={theme.Color.primary} />
          </TouchableOpacity>
        )} */}
      </View>
    </View>
  );
};

export default React.memo(withTheme(Day));
